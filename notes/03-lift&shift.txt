1) create security groups for load balancer, tomcat instances, (memcache, rabbitmq & sql)
    for LB (vprofile-LB-sg): http & https ( 80, 443) from any ipv4 and ipv6
    for tomcat (vprofile-app-sg): custom tcp-8080, source is vprofile-LB-sg
                22 port
    for backend (vprofile-backend-sg): mysql:3306, source is app-sg
                                       memcache: 11211, source is app-sg
                                       rmq: 5672, source is app-sg
                                       ssh: 22, from my ip
                                       alltrffic, from app-sg
        after creating sgs, edit inbound rules and add all traffic from bakenf-sg for internal communications

2) key pairs
    name: vprofile-prod-key, .pem format

=================================================================================
Now clone repo from "hkhcoder/vprofile-project" and chnage to awsliftandshift branch
in cloned repo under user data, start from 
    db(instance - amazonlinux 2023 ami and tags for instances and volumes also) and advanced -> userdata add "mysql.sh" script

    memcache -> amazonlinux 2023 ami
    rabbitmq -> amazonlinux 2023 ami
    tomcat -> ubuntu2024

for connecting to instances:
    $ ssh -i path/to/.pem user@IP

in sqlsever, check service and loginto to mariadb
 $ mysql -u admin -padmin123 accounts


==========================================================================

DNS service:
------------
resolves name to ip address , route53 is dns service in aws
    create hosted xone -> domain name(vprofile.in) -> type (private hosted) -> region(n.virgina) -> 
in hosted zones we can create records:
    get private ips (db, mc, rmq, app) -> create records -> record name(db01, mc01, rmq01, app01) -> value: pate private ip -> record type(A -> name to ip map;cname -> name to name mapping like LB url) -> create record
to check resolvng correctly or not:
    ssh to appo1 and run commands:
        $ ping -c 4 db01.vprofile.in

build and deploy artifacts:
==============================
-> build artifcats from source code with maven  in local and push to s3 bucket from there to ec2 instance
    auth process :
    ------------
    local --------------> s3 -------------------> ec2
           iam keys auth      iam roles auth


    create s3 bucken in n.virgina region, bucket names should be unique(vprofile-las-artifacts)
    create iam user ,
        iam -> users -> create  user (vprofile-s3-admin) ->  attcah policies directly -> amazon s3 full access -> create user and generate access keys,
        security credentials -> create access keys -> cli and save keys.

    create iam roles: -> roles can be applies to any aws services like ec2-instances
        iam -> roles -> create role -> aws service -> usecase(ec2) -> permission(amazon s3 full access) ->role(s3-admin) -> create -> attch riole to ec2-instance(app01)

    -> before building artifacts in application.properties make sure, host names should be correct (db01.vprofile.in, mc01.vprofile.in, rmq01.vprofile.in)
    in vs code -> cntrl+shift+p, select default profile, bash   -> now on view -> terminal
        $ mvn -version (should be 3.9.9, java 17.0.12)
        $ aws
    now under vprofile-project path build artifacts
    $ mvn install -> generates target folder which has vprofile.war which is archive of vprofile folder
    $ aws configure (configure all the details,  files will be store under ~/.aws/config & credentials)

    Now copy artifact to s3 bucket:
    $ aws s3 cp target/vprofile-v2.war s3://vproile-las-artifacts/
    $ ws s3 ls s3://vproile-las-artifacts/

    now login to app instance and install aws cli tool
    $ sanp install aws-cli --classic
    $ aws 
    copy artifcat from s3 bucket to app instance
    $ aws s3 cp s3://vproile-las-artifacts/vprofile-v2.war /tmp/
    now stop tomcat service and remove default ROOT and copy artifcats
    $ systemctl stop tomcat10
    $  rm -rf /var/lib/tomcat10/webapps/ROOT
    $ cp /tmp/vprofile-v2.war /var/lib/tomcat10/webapps/ROOT.war
         after starting tomcat it will extract ROOT.war to ROOT
    $ systemctl start tomcat10

Load balanving & DNS:
=========================

    to test tomcat is responding or not, for tomcat instances add port 8080 from my ip and test in browser

    target groups:
    ---------------
    lb -> target grps -> crt targt grp -> targt as instancs -> targt grp nme is vprofile-las-tg -> protocol http:8080 -> hlth chk, advance hlth chk , hlth chk port override 8080 -> nxt -> select app01(tomcat) -> 8080(icludea spending below) -> crt trgt grp 

    load balancer:
    ------------
    lb -> load balancer ->  app lb -> name(vprofile-las-lb) -> select all VPC -> security grp select LB security grp -> listeners and routing : listener http:80 , forward to vprofile-las-tg, for https add one more listener and select https, under secutiry policy select acm  and selct cert -> craete lb

    After creating lb , go to lb 
        copy DNS name and add to domain record(godaddy) as canme name:vprofileapp , value:<lb dns anme>

    do hcs of target grps , check port 8080 is allowed from lb sg or not

Auto scaling Group:
====================
    scaling 3 reurs:
    ----------
    1) ami 
    2) template to launch instance(sg, keypairs..)
    3) asg itself where we lauych template  

    ami:
    ----
    go to instance where asg wants to craete
     selct(app01) -> actions -> img & templt  -> crt imag (vprofile-las-app-img) -> crat imag 
     images -> ami's 
    now create templates:
    -----------------------
    templat -> launch template -> name(vprofile-las-app-LT) -> My Amis(owned by me), selct ami -> t3/t2.micro -> sg group (app sg)  -> resrc tags(name:vprofile-app, project:vprofile) tag instances & names  -> advanced detauils -> iam instance prifile : s3-admin
    asg:
    ---
    auto scaling -> asg -> craete -> name(vprofile-las-app-asg) -> select created template -> select all availability zones -> attch to an existing LB -> choose LB from  target groups -> hc , select elastic Lb HC -> desired cpacity 1 -> min 1 & max 4 -> target tracking scaling policies -> avg cpu utilization ->uncheck enable saclin protection(if checks, this will not terminate instance if it is unhaelthy) --> add notification (select created sns topic) -> create asg 

    target groups -> selct trgt grp -> attributes ->  edit -> turn on stickiness 

    asg -> targets -> deregister vprofile-app01 , delete app01 instances 

    validate by copying dn of LB or domain name in browser 

    --> this infrastructurea as a service

    terminatingmethod:
    ====================
    1) auto scaling groups 
    2) terminate ec2 instances except app instances 
    3)delete Lb , delete target groups & check volumes
    4) remove all creted records in hosted zones, then hosted zones
    5) snap shots created from ami,  forst deregister ami and then delete snapshots 
    6) s3 bucket -> first empty s3 bucket and then delete it 

